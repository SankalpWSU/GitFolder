{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red27\green31\blue35;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000\c0;\cssrgb\c14266\c16242\c18114;
}
\margl1440\margr1440\vieww17500\viewh9820\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf2 \cb3 The naming of objects should be clear about its porpose. It should use camel case and should display their side effects. Should not use initials, for delegates unnamed parameter should be the source. Parameter should be more descriptive and have a proper English spelling. Prefer using extension for protocol methods. Comments should be used for proper documentation but unused comments and codes should be removed to keep conserve space and prevent line wrapping with proper indent. Do minimal import for source file. Use of Classes should be done for things that does not have an identity or a specific life cycle, similar way Structs can be used.\
Swift offers bridging to Objective-C , so we can still use the full set of methods. Also, use of CGFloat can be used to minimize too many conversions. A good technique is to define everything using Let and later change it to Var based on the utilization. For optionals, implicit unwrapped to be done only when you are sure that it will be initialized before use else do an optional binding or use guard. Prefer compact code and let the compiler infer the type for constants or variable of single instance. For empty arrays and dictionary, use type annotation.\cf2 \cb3 \expnd0\expndtw0\kerning0
Prefer the shortcut versions of type declarations over the full generics syntax. Free functions, which aren't attached to a class or type, should be used sparingly. When possible, prefer to use a method instead of a free function. This aids in readability and discoverability. Code (even non-production, tutorial demo code) should not create reference cycles. Full access control annotation in tutorials can distract from the main topic and is not required. Prefer for-in style over while loop style. The Ternary operator, ?: , should only be used when it increases clarity or code neatness. Use of multiple if statements should be avoided by using the guard statement, The guard statement is built for this.\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Parentheses around conditionals are not required and should be omitted. When building a long string literal, you're encouraged to use the multi-line string literal syntax.Do not use emoji in your projects.}